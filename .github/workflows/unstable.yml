# Evil twin of main.yml which checks that 3photons remains compatible with
# latest Rust developments every once in a while.
#
# NOTE: It's useless to cache the target folder on this rare workflow since it
#       would usually be invalidated by 1/how rarely the job runs and
#       2/how frequently new nightly and beta versions come out.
#
# FIXME: For now, must be manually kept in sync with main.yml

on:
  schedule:
    - cron: '0 0 1,15 * *'

name: Unstable Rust CI


jobs:
  # Formatter output doesn't depend on cargo features, and only needs to be
  # tested on stable since we don't care about older format norms.
  format:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install toolchain
        id: toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true
          components: rustfmt

      - name: Check format
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check


  # Clippy and rustc lints depend on cargo features. We don't care about
  # warnings on the minimum supported version, only about building and running.
  lints:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        rust:
          - beta
          - nightly
        features:
          - ''
          - f32
          - faster-evgen
          - multi-threading
          - multi-threading,faster-threading
          - no-photon-sorting
          - standard-random
          - standard-random,f32
          - standard-random,multi-threading
          - standard-random,multi-threading,faster-threading

    env:
      RUSTFLAGS: -D warnings

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install toolchain
        id: toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true
          components: clippy

      - name: Make cargo feature set hashable
        run: echo ${{ matrix.features }} > __features.log
        shell: bash

      - name: Cache Cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: cargo-registry-features_${{ hashFiles('__features.log') }}-lock_${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            cargo-registry-features_${{ hashFiles('__features.log') }}
            cargo-registry

      - name: Cache Cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: cargo-index-features_${{ hashFiles('__features.log') }}-lock_${{ hashFiles('**/Cargo.lock') }}
          restore_keys: |
            cargo-index-features_${{ hashFiles('__features.log') }}
            cargo-index

      - name: Type-check the program
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: --features "${{ matrix.features }}"

      - name: Check clippy lints
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --features "${{ matrix.features }}" -- -D warnings


  # TODO: Add unit test build, which should get its own target cache


  # Test that 3photons runs and produces sensible output on all supported
  # combinations of rust version and features.
  run:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        rust:
          - beta
          - nightly
        features:
          - ''
          - f32
          - faster-evgen
          - multi-threading
          - multi-threading,faster-threading
          - no-photon-sorting
          - standard-random
          - standard-random,f32
          - standard-random,multi-threading
          - standard-random,multi-threading,faster-threading

    env:
      RUSTFLAGS: -D warnings

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install toolchain
        id: toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true

      - name: Make cargo feature set hashable
        run: echo ${{ matrix.features }} > __features.log
        shell: bash

      - name: Cache Cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: cargo-registry-features_${{ hashFiles('__features.log') }}-lock_${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            cargo-registry-features_${{ hashFiles('__features.log') }}
            cargo-registry

      - name: Cache Cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: cargo-index-features_${{ hashFiles('__features.log') }}-lock_${{ hashFiles('**/Cargo.lock') }}
          restore_keys: |
            cargo-index-features_${{ hashFiles('__features.log') }}
            cargo-index

      - name: Roll a build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --features "${{ matrix.features }}"

      # TODO: Test output with something like numdiff
      - name: Run the program
        uses: actions-rs/cargo@v1
        with:
          command: run
          args: --release --features "${{ matrix.features }}"

      - name: Upload the result for manual inspection
        uses: actions/upload-artifact@v1
        with:
          name: result-rust_${{ matrix.rust }}-features_${{ matrix.features }}
          path: res.dat
