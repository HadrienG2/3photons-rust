# Based on templates from https://github.com/actions-rs
#
# We don't cache the toolchain because bringing back the cache was measured to
# take more time than downloading the toolchain on Github's current setup. And
# it also brought suspicious file permission warnings on unpacking.
#
# FIXME: For now, must be manually kept in sync with unstable.yml

on: [push, pull_request]

name: Main CI

jobs:
  # Formatter output doesn't depend on cargo features, and only needs to be
  # tested on stable since we don't care about older format norms.
  format:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install toolchain
        id: toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt

      - name: Check format
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check


  # Clippy and rustc lints depend on cargo features. We don't care about
  # warnings on the minimum supported version, only about building and running.
  lints:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        features:
          - ''
          - f32
          - faster-evgen
          - multi-threading
          - multi-threading,faster-threading
          - no-photon-sorting
          - standard-random
          - standard-random,f32
          - standard-random,multi-threading
          - standard-random,multi-threading,faster-threading

    env:
      RUSTFLAGS: -D warnings

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install toolchain
        id: toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: clippy

      - name: Make cargo feature set hashable
        run: echo "${{ matrix.features }}" > __features.log

      - name: Cache Cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: cargo-registry-features_${{ hashFiles('__features.log') }}-lock_${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            cargo-registry-features_${{ hashFiles('__features.log') }}
            cargo-registry

      - name: Cache Cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: cargo-index-features_${{ hashFiles('__features.log') }}-lock_${{ hashFiles('**/Cargo.lock') }}
          restore_keys: |
            cargo-index-features_${{ hashFiles('__features.log') }}
            cargo-index

      - name: Cache Cargo check target directory
        uses: actions/cache@v1
        with:
          path: target
          key: cargo-target_check-rust_${{ steps.toolchain.outputs.rustc_hash }}-features_${{ hashFiles('__features.log') }}-lock_${{ hashFiles('**/Cargo.lock') }}
          restore_keys: |
            cargo-target_check-rust_${{ steps.toolchain.outputs.rustc_hash }}-features_${{ hashFiles('__features.log') }}
            cargo-target_check-rust_${{ steps.toolchain.outputs.rustc_hash }}

      - name: Type-check the program
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: --features "${{ matrix.features }}"

      - name: Check clippy lints
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --features "${{ matrix.features }}" -- -D warnings


  # Test that 3photons runs and produces sensible output on all supported
  # combinations of rust version and features.
  run:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        rust:
          - stable
          - 1.37.0  # Minimum supported Rust version
        features:
          - ''
          - f32
          - faster-evgen
          - multi-threading
          - multi-threading,faster-threading
          - no-photon-sorting
          - standard-random
          - standard-random,f32
          - standard-random,multi-threading
          - standard-random,multi-threading,faster-threading
      # TODO: Added to check numdiff tolerances, remove after use
      fail-fast: false

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install toolchain
        id: toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true

      # TODO: Consider caching this build, which may require an different prefix
      # TODO: Propagate to unstable build
      - name: Install numdiff
        run: |
          curl https://mirrors.up.pt/pub/nongnu/numdiff/numdiff-5.9.0.tar.gz | tar -xz
          cd numdiff-5.9.0
          ./configure --prefix=$HOME/numdiff
          make
          make install
          cd -

      - name: Make cargo feature set hashable
        run: echo "${{ matrix.features }}" > __features.log

      - name: Cache Cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: cargo-registry-features_${{ hashFiles('__features.log') }}-lock_${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            cargo-registry-features_${{ hashFiles('__features.log') }}
            cargo-registry

      - name: Cache Cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: cargo-index-features_${{ hashFiles('__features.log') }}-lock_${{ hashFiles('**/Cargo.lock') }}
          restore_keys: |
            cargo-index-features_${{ hashFiles('__features.log') }}
            cargo-index

      - name: Cache Cargo release target directory
        uses: actions/cache@v1
        with:
          path: target
          key: cargo-target_release-rust_${{ steps.toolchain.outputs.rustc_hash }}-features_${{ hashFiles('__features.log') }}-lock_${{ hashFiles('**/Cargo.lock') }}
          restore_keys: |
            cargo-target_release-rust_${{ steps.toolchain.outputs.rustc_hash }}-features_${{ hashFiles('__features.log') }}
            cargo-target_release-rust_${{ steps.toolchain.outputs.rustc_hash }}

      - name: Build the program
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --features "${{ matrix.features }}"

      - name: Run the program
        uses: actions-rs/cargo@v1
        with:
          command: run
          args: --release --features "${{ matrix.features }}"

      - name: Compare result to reference
        run: $HOME/numdiff/bin/numdiff -V "reference/res.data-features_${{ matrix.features }}" res.data
