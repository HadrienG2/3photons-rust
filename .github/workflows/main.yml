# Based on templates from https://github.com/actions-rs
#
# FIXME: For now, must be manually kept in sync with unstable.yml

on: [push, pull_request]

name: Main CI

jobs:
  # TODO: Split into multiple jobs, enabling parallelization
  ci:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
          - macOS-latest
        rust:
          - stable
          - 1.37.0  # Minimum Supported Rust Version

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      # NOTE: We don't cache the toolchain because bringing back the cache was
      #       measured to take more time than downloading the toolchain.

      - name: Install toolchain
        id: toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true
          components: rustfmt, clippy

      - name: Cache Cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: cargo-registry-${{ runner.os }}-rust_${{ steps.toolchain.outputs.rustc_hash }}-lock_${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            cargo-registry-${{ runner.os }}-rust_${{ steps.toolchain.outputs.rustc_hash }}

      - name: Cache Cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: cargo-index-${{ runner.os }}-rust_${{ steps.toolchain.outputs.rustc_hash }}-lock_${{ hashFiles('**/Cargo.lock') }}
          restore_keys: |
            cargo-index-${{ runner.os }}-rust_${{ steps.toolchain.outputs.rustc_hash }}

      - name: Cache Cargo build
        uses: actions/cache@v1
        with:
          path: target
          key: cargo-build-${{ runner.os }}-rust_${{ steps.toolchain.outputs.rustc_hash }}-lock_${{ hashFiles('**/Cargo.lock') }}
          restore_keys:
            cargo-build-${{ runner.os }}-rust_${{ steps.toolchain.outputs.rustc_hash }}

      - name: Type-check the program
        uses: actions-rs/cargo@v1
        with:
          command: check

      - name: Check format
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

      - name: Check clippy lints
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D warnings

      # TODO: Add unit tests
      # - name: Run unit tests
      #   uses: actions-rs/cargo@v1
      #   with:
      #     command: test

      - name: Roll a build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release

      # TODO: Test multiple features
      # TODO: Test output with something like numdiff
      - name: Run the program
        uses: actions-rs/cargo@v1
        with:
          command: run
          args: --release

      - name: Upload the result for manual inspection
        uses: actions/upload-artifact@v1
        with:
          name: result-${{ runner.os }}-rust_${{ matrix.rust }}
          path: res.dat
