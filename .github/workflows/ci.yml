# There are two kinds of continuous integration jobs in this project:
#
# - Every code submission or master push passes continuous integration on the
#   minimal supported Rust version and the current stable Rust version.
# - Two times a month, a scheduled job makes sure that the code remains
#   compatible and lint-free on upcoming Rust toolchains (beta and nightly).
#
# No caching of Rust toolchains or target directories is performed on unstable
# runs, since those runs are rare and the caches would be invalidated inbetween
# two of them (especially for nightly toolchains).

on:
  push:
  pull_request:
  schedule:
    - cron: '0 0 3,17 * *'

name: Continuous Integration

env:
  RUSTFLAGS: -D warnings

jobs:
  # Formatter output doesn't depend on cargo features, and only needs to be
  # tested on the latest supported release of each CI run.
  format:
    # Only run on "pull_request" event for external PRs. This is to avoid
    # duplicate builds for PRs created from internal branches.
    if: github.event_name == 'push' || github.event_name == 'schedule' || github.event.pull_request.head.repo.full_name != github.repository

    runs-on: ubuntu-latest

    steps:
      - name: Checkout sources
        uses: actions/checkout@v3

      - name: Set up stable toolchain
        if: github.event_name != 'schedule'
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: rustfmt

      - name: Set up nightly toolchain
        if: github.event_name == 'schedule'
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: nightly
          components: rustfmt

      - name: Check format
        uses: actions-rust-lang/rustfmt@v1


  # Clippy and rustc lints depend on cargo features. We don't care about
  # warnings on the minimum supported version, only about building and running.
  lints:
    # Only run on "pull_request" event for external PRs. This is to avoid
    # duplicate builds for PRs created from internal branches.
    if: github.event_name == 'push' || github.event_name == 'schedule' || github.event.pull_request.head.repo.full_name != github.repository

    runs-on: ubuntu-latest

    strategy:
      matrix:
        features:
          - ''
          - f32
          - faster-evgen
          - multi-threading
          - multi-threading,faster-threading
          - no-photon-sorting
          - standard-random
          - standard-random,f32
          - standard-random,multi-threading
          - standard-random,multi-threading,faster-threading

    steps:
      - name: Checkout sources
        uses: actions/checkout@v3

      - name: Set up stable toolchain
        if: github.event_name != 'schedule'
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: clippy

      - name: Set up nightly toolchain
        if: github.event_name == 'schedule'
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: nightly
          components: clippy

      - name: Type-check the program
        run: cargo check --features "${{ matrix.features }}"

      - name: Check clippy lints
        run: cargo clippy --features "${{ matrix.features }}" -- -D warnings


  # Test that 3photons runs and produces sensible output on all supported
  # combinations of rust version and features.
  run-contrib:
    # Only run on "pull_request" event for external PRs. This is to avoid
    # duplicate builds for PRs created from internal branches.
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name != github.repository

    runs-on: ubuntu-latest

    strategy:
      matrix:
        rust:
          - stable
          - 1.65.0  # Minimum supported Rust version
        features:
          - ''
          - f32
          - faster-evgen
          - multi-threading
          - multi-threading,faster-threading
          - no-photon-sorting
          - standard-random
          - standard-random,f32
          - standard-random,multi-threading
          - standard-random,multi-threading,faster-threading

    steps:
      - name: Checkout sources
        uses: actions/checkout@v3

      - name: Set up toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}

      - name: Build the program
        run: cargo build --release --features "${{ matrix.features }}"

      - name: Run the program
        run: ./target/release/trois_photons | tee stdout.log

      # NOTE: No dependency on OS since only one is used
      - name: Cache numdiff installation
        id: cache-numdiff
        uses: actions/cache@v3
        with:
          path: numdiff
          key: alljobs-numdiff-5.9.0

      - name: Install numdiff
        if: steps.cache-numdiff.outputs.cache-hit != 'true'
        run: |
          CI_DIR=`pwd`
          curl https://mirrors.up.pt/pub/nongnu/numdiff/numdiff-5.9.0.tar.gz | tar -xz
          cd numdiff-5.9.0
          ./configure --prefix=$CI_DIR/numdiff
          make
          make install
          cd -

      # NOTE: Tolerances needed due to some differences between CI results and
      #       local results. Could be caused by differences in libm versions?
      - name: Compare result to reference
        run: |
          case "${{ matrix.features }}" in
            "f32")
              PRECISION="-a 1.1e-8"
              ;;
            "standard-random,multi-threading,faster-threading")
              PRECISION="-a 1.1e-16"
              ;;
            *)
              PRECISION=""
              ;;
          esac
          numdiff/bin/numdiff $PRECISION -V "reference/res.data-features_${{ matrix.features }}" res.data

      - name: Check standard output
        run: |
          case "${{ matrix.features }}" in
            "f32")
              PRECISION="-r 1.9e-5"
              ;;
            *)
              PRECISION=""
              ;;
          esac
          numdiff/bin/numdiff $PRECISION -V "reference/stdout.log-features_${{ matrix.features }}" stdout.log


  # Check compatibility with newer Rust/deps versions (scheduled CI)
  #
  # FIXME: There should be a way to use conditional build matrices without
  #        duplicating the whole job recipe...
  #
  run-unstable:
    if: github.event_name == 'schedule'

    runs-on: ubuntu-latest

    strategy:
      matrix:
        rust:
          - beta
          - nightly
          - 1.65.0  # MSRV (compatibility can be broken by deps updates)
        features:
          - ''
          - f32
          - faster-evgen
          - multi-threading
          - multi-threading,faster-threading
          - no-photon-sorting
          - standard-random
          - standard-random,f32
          - standard-random,multi-threading
          - standard-random,multi-threading,faster-threading

    steps:
      - name: Checkout sources
        uses: actions/checkout@v3

      - name: Set up toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}

      - name: Build the program
        run: cargo build --release --features "${{ matrix.features }}"

      - name: Run the program
        run: ./target/release/trois_photons | tee stdout.log

      # NOTE: No dependency on OS since only one is used
      - name: Cache numdiff installation
        id: cache-numdiff
        uses: actions/cache@v3
        with:
          path: numdiff
          key: alljobs-numdiff-5.9.0

      - name: Install numdiff
        if: steps.cache-numdiff.outputs.cache-hit != 'true'
        run: |
          CI_DIR=`pwd`
          curl https://mirrors.up.pt/pub/nongnu/numdiff/numdiff-5.9.0.tar.gz | tar -xz
          cd numdiff-5.9.0
          ./configure --prefix=$CI_DIR/numdiff
          make
          make install
          cd -

      # NOTE: Tolerances needed due to some differences between CI results and
      #       local results. Could be caused by differences in libm versions?
      - name: Compare result to reference
        run: |
          case "${{ matrix.features }}" in
            "f32")
              PRECISION="-a 1.1e-8"
              ;;
            "standard-random,multi-threading,faster-threading")
              PRECISION="-a 1.1e-16"
              ;;
            *)
              PRECISION=""
              ;;
          esac
          numdiff/bin/numdiff $PRECISION -V "reference/res.data-features_${{ matrix.features }}" res.data

      - name: Check standard output
        run: |
          case "${{ matrix.features }}" in
            "f32")
              PRECISION="-r 1.9e-5"
              ;;
            *)
              PRECISION=""
              ;;
          esac
          numdiff/bin/numdiff $PRECISION -V "reference/stdout.log-features_${{ matrix.features }}" stdout.log
